# Reading C:/modeltech_6.6d/tcl/vsim/pref.tcl 
# //  ModelSim SE 6.6d Nov  1 2010 
# //
# //  Copyright 1991-2010 Mentor Graphics Corporation
# //              All Rights Reserved.
# //
# //  THIS WORK CONTAINS TRADE SECRET AND 
# //  PROPRIETARY INFORMATION WHICH IS THE PROPERTY
# //  OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS
# //  AND IS SUBJECT TO LICENSE TERMS.
# //
# do run.do 
# 1
# Model Technology ModelSim SE vlog 6.6d Compiler 2010.11 Nov  1 2010
# -- Compiling package instr_register_pkg
# -- Compiling module instr_register
# -- Importing package instr_register_pkg
# -- Compiling module instr_register_test
# -- Compiling interface tb_ifc
# -- Compiling module top
# 
# Top level modules:
# 	top
# vsim +notimingchecks +nowarnTSCALE -sva -nocoverage -quiet -novopt top 
# Refreshing C:\Users\botsc\Desktop\TSC\lab2\sim\work.instr_register_pkg
# Refreshing C:\Users\botsc\Desktop\TSC\lab2\sim\work.top
# Refreshing C:\Users\botsc\Desktop\TSC\lab2\sim\work.tb_ifc
# Refreshing C:\Users\botsc\Desktop\TSC\lab2\sim\work.instr_register_test
# Refreshing C:\Users\botsc\Desktop\TSC\lab2\sim\work.instr_register
# ** Warning: (vsim-8441) ../lab01_testbench-interface/instr_register_test.sv(79): Clocking block output intf_lab2.cb.opcode is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../lab01_testbench-interface/instr_register_test.sv(77): Clocking block output intf_lab2.cb.operand_a is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../lab01_testbench-interface/instr_register_test.sv(78): Clocking block output intf_lab2.cb.operand_b is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../lab01_testbench-interface/instr_register_test.sv(31): Clocking block output intf_lab2.cb.read_pointer is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../lab01_testbench-interface/instr_register_test.sv(30): Clocking block output intf_lab2.cb.write_pointer is not legal in this
# or another expression.
#         Region: /top/test
# 
# 
# ***********************************************************
# ***  THIS IS NOT A SELF-CHECKING TESTBENCH (YET).  YOU  ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# Reseting the instruction register...
# first header
# 
# Writing values to register stack...
# Writing to register location 0: 
#   opcode = 1 (PASSA)
#   operand_a = -12
#   operand_b = 4
# 
# Printing transaction:                   20 ns 
# Writing to register location 1: 
#   opcode = 3 (ADD)
#   operand_a = -9
#   operand_b = 9
# 
# Printing transaction:                   30 ns 
# Writing to register location 2: 
#   opcode = 5 (MULT)
#   operand_a = -15
#   operand_b = 13
# 
# Printing transaction:                   40 ns 
# 
# Reading back the same register locations written...
# Read from register location 2: 
#   opcode = 5 (MULT)
#   operand_a = -15
#   operand_b = 13
# 
# Printing results:                   55 ns 
# Read from register location 1: 
#   opcode = 3 (ADD)
#   operand_a = -9
#   operand_b = 9
# 
# Printing results:                   65 ns 
# Read from register location 0: 
#   opcode = 1 (PASSA)
#   operand_a = -12
#   operand_b = 4
# 
# Printing results:                   75 ns 
# Read from register location 2: 
#   opcode = 5 (MULT)
#   operand_a = -15
#   operand_b = 13
# 
# Printing results:                   85 ns 
# Read from register location 1: 
#   opcode = 3 (ADD)
#   operand_a = -9
#   operand_b = 9
# 
# Printing results:                   95 ns 
# Read from register location 0: 
#   opcode = 1 (PASSA)
#   operand_a = -12
#   operand_b = 4
# 
# Printing results:                  105 ns 
# Read from register location 2: 
#   opcode = 5 (MULT)
#   operand_a = -15
#   operand_b = 13
# 
# Printing results:                  115 ns 
# Read from register location 1: 
#   opcode = 3 (ADD)
#   operand_a = -9
#   operand_b = 9
# 
# Printing results:                  125 ns 
# Read from register location 0: 
#   opcode = 1 (PASSA)
#   operand_a = -12
#   operand_b = 4
# 
# Printing results:                  135 ns 
# 
# ***********************************************************
# ***  THIS IS NOT A SELF-CHECKING TESTBENCH (YET).  YOU  ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# ** Note: $finish    : ../lab01_testbench-interface/instr_register_test.sv(65)
#    Time: 140 ns  Iteration: 2  Instance: /top/test
# 1
# Break in Module instr_register_test at ../lab01_testbench-interface/instr_register_test.sv line 65
# Simulation Breakpoint: 1
# Break in Module instr_register_test at ../lab01_testbench-interface/instr_register_test.sv line 65
# MACRO ./run.do PAUSED at line 45
