# 1
# Model Technology ModelSim SE vlog 6.6d Compiler 2010.11 Nov  1 2010
# -- Compiling package instr_register_pkg
# -- Compiling module instr_register
# -- Importing package instr_register_pkg
# -- Compiling module instr_register_test
# -- Compiling interface tb_ifc
# -- Compiling module top
# 
# Top level modules:
# 	top
# vsim -coverage -sva -quiet -sv_seed 5555 -novopt top 
# Refreshing C:\Users\botsc\Desktop\TSC\lab2\sim\work.instr_register_pkg
# Refreshing C:\Users\botsc\Desktop\TSC\lab2\sim\work.top
# Refreshing C:\Users\botsc\Desktop\TSC\lab2\sim\work.tb_ifc
# Refreshing C:\Users\botsc\Desktop\TSC\lab2\sim\work.instr_register_test
# Refreshing C:\Users\botsc\Desktop\TSC\lab2\sim\work.instr_register
# ** Warning: (vsim-8441) ../lab01_testbench-interface/instr_register_test.sv(36): Clocking block output #parent#.intf_lab2.cb.opcode is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../lab01_testbench-interface/instr_register_test.sv(25): Clocking block output #parent#.intf_lab2.cb.operand_a is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../lab01_testbench-interface/instr_register_test.sv(31): Clocking block output #parent#.intf_lab2.cb.operand_b is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../lab01_testbench-interface/instr_register_test.sv(36): Clocking block output #parent#.intf_lab2.cb.opcode is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../lab01_testbench-interface/instr_register_test.sv(25): Clocking block output #parent#.intf_lab2.cb.operand_a is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../lab01_testbench-interface/instr_register_test.sv(31): Clocking block output #parent#.intf_lab2.cb.operand_b is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../lab01_testbench-interface/instr_register_test.sv(125): Clocking block output intf_lab2.cb.opcode is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../lab01_testbench-interface/instr_register_test.sv(126): Clocking block output intf_lab2.cb.operand_a is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../lab01_testbench-interface/instr_register_test.sv(127): Clocking block output intf_lab2.cb.operand_b is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../lab01_testbench-interface/instr_register_test.sv(124): Clocking block output intf_lab2.cb.write_pointer is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../lab01_testbench-interface/instr_register_test.sv(133): Clocking block output intf_lab2.cb.read_pointer is not legal in this
# or another expression.
#         Region: /top/test
# ** Error: (vish-4014) No objects found matching '/top/test/seed'.
# Executing ONERROR command at macro ./wave.do line 3
# 
# 
# ***********************************************************
# ***  THIS IS NOT A SELF-CHECKING TESTBENCH (YET).  YOU  ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# Reseting the instruction register...
# first header
# 
# Writing values to register stack...
# Writing to register location 0: 
#   opcode = 2 (PASSB)
#   operand_a = 8
#   operand_b = 2
# 
# Printing transaction:                   20 ns 
# Writing to register location 1: 
#   opcode = 3 (ADD)
#   operand_a = -5
#   operand_b = 14
# 
# Printing transaction:                   30 ns 
# Writing to register location 2: 
#   opcode = 4 (SUB)
#   operand_a = 13
#   operand_b = 8
# 
# Printing transaction:                   40 ns 
# Writing to register location 3: 
#   opcode = 2 (PASSB)
#   operand_a = -12
#   operand_b = 12
# 
# Printing transaction:                   50 ns 
# Writing to register location 4: 
#   opcode = 4 (SUB)
#   operand_a = 0
#   operand_b = 2
# 
# Printing transaction:                   60 ns 
# 
# Reading back the same register locations written...
# Read from register location 0: 
#   opcode = 2 (PASSB)
#   operand_a = 8
#   operand_b = 2
# 
# Printing results:                   75 ns 
# Read from register location 1: 
#   opcode = 3 (ADD)
#   operand_a = -5
#   operand_b = 14
# 
# Printing results:                   85 ns 
# Read from register location 2: 
#   opcode = 4 (SUB)
#   operand_a = 13
#   operand_b = 8
# 
# Printing results:                   95 ns 
# Read from register location 3: 
#   opcode = 2 (PASSB)
#   operand_a = -12
#   operand_b = 12
# 
# Printing results:                  105 ns 
# Read from register location 4: 
#   opcode = 4 (SUB)
#   operand_a = 0
#   operand_b = 2
# 
# Printing results:                  115 ns 
# 
# ***********************************************************
# ***  THIS IS NOT A SELF-CHECKING TESTBENCH (YET).  YOU  ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# ** Note: $finish    : ../lab01_testbench-interface/instr_register_test.sv(100)
#    Time: 120 ns  Iteration: 2  Instance: /top/test
# 1
# Break in Task run at ../lab01_testbench-interface/instr_register_test.sv line 100
# Simulation Breakpoint: 1
# Break in Task run at ../lab01_testbench-interface/instr_register_test.sv line 100
# MACRO ./run.do PAUSED at line 51
